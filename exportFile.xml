<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.1" created="2017-12-17 18:03" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Lubuntu</title>
	<link>http://localhost/lubuntu-alt</link>
	<description>Just another WordPress site</description>
	<pubDate>Sun, 17 Dec 2017 18:03:16 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://localhost/lubuntu-alt</wp:base_site_url>
	<wp:base_blog_url>http://localhost/lubuntu-alt</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[yk.verma2000@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[fossasia]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[fossasia]]></wp:cat_name>
	</wp:category>

	<generator>https://wordpress.org/?v=4.9.1</generator>

	<item>
		<title>Hello World</title>
		<link>http://localhost/lubuntu-alt/2015/04/30/hello-world/</link>
		<pubDate>Thu, 30 Apr 2015 08:07:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[Well, technically, hello world again! I used <a href="http://danghaian.tumblr.com/">tumblr</a> as my blog platform before, but the design and functionality just don’t seem really appealing to me. So I’m switching to <a href="http://jekyllrb.com/">Jekyll</a>.

After several hours spending on the documentation and <a href="http://jekyllthemes.org/">picking a theme</a>, I was able to set up my customized and free blog webpage. Even though my experience with jekyll is limited, I already love its concept and its simplicity.

Many thanks for the jekyll team for an awesome product and <a href="https://github.com/yulijia/freshman21/">Lijia Yu</a> for a nice and clean template, so that I can get my new blog running quickly.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2015-04-30 08:07:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-30 08:07:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to implement JSONP to download XML resource</title>
		<link>http://localhost/lubuntu-alt/2015/07/09/how-to-implement-jsonp-to-download-xml-resource/</link>
		<pubDate>Thu, 09 Jul 2015 08:09:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[According to the same-origin security policy, web page can freely share images, stylesheets, scripts… but web fonts and AJAX requests are only accessible from the same domain.

Sometimes this is not desired behaviour, such as when getting a json / xml file from a different domain, using AJAX. In such cases, it all comes down to two solutions :

1- The source sets its header to allow specific domain cross-origin resource sharing (CORS). In PHP, this is done with <code class="highlighter-rouge">header</code> function :
<figure class="highlight">
<pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nb">header</span><span class="p">(</span><span class="s1">'Access-Control-Allow-Origin: *'</span><span class="p">);</span></code></pre>
</figure>
2- <strong>Use JSONP</strong>.

JSONP is short for JSON padding, a well-known “workaround” to solve CORS. It only works with GET.

To send AJAX requests using JSONP, the server must first knows how to respond to JSONP requests. It usually detects JSONP requests using <code class="highlighter-rouge">callback</code> parameter.
<figure class="highlight">
<pre><code class="language-php" data-lang="php"></code></pre>
<table>
<tbody>
<tr>
<td class="gutter gl">
<pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36</pre>
</td>
<td class="code">
<pre><span class="cp">&lt;?php</span>
<span class="c1">// compute result
</span><span class="p">[</span><span class="o">...</span><span class="p">]</span>

<span class="c1">// output result
</span><span class="nx">JsonpHelper</span><span class="o">::</span><span class="na">outputXML</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>

<span class="c1">// json helper class - credits : @andibraeu
</span><span class="k">class</span> <span class="nc">JsonpHelper</span> <span class="p">{</span>
	<span class="k">private</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">is_valid_callback</span><span class="p">(</span><span class="nv">$subject</span><span class="p">)</span>
	<span class="p">{</span>
	    <span class="nv">$identifier_syntax</span>
	      <span class="o">=</span> <span class="s1">'/^[$_\p{L}][$_\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\x{200C}\x{200D}]*+$/u'</span><span class="p">;</span>
	    <span class="nv">$reserved_words</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">'break'</span><span class="p">,</span> <span class="s1">'do'</span><span class="p">,</span> <span class="s1">'instanceof'</span><span class="p">,</span> <span class="s1">'typeof'</span><span class="p">,</span> <span class="s1">'case'</span><span class="p">,</span>
	      <span class="s1">'else'</span><span class="p">,</span> <span class="s1">'new'</span><span class="p">,</span> <span class="s1">'var'</span><span class="p">,</span> <span class="s1">'catch'</span><span class="p">,</span> <span class="s1">'finally'</span><span class="p">,</span> <span class="s1">'return'</span><span class="p">,</span> <span class="s1">'void'</span><span class="p">,</span> <span class="s1">'continue'</span><span class="p">,</span> 
	      <span class="s1">'for'</span><span class="p">,</span> <span class="s1">'switch'</span><span class="p">,</span> <span class="s1">'while'</span><span class="p">,</span> <span class="s1">'debugger'</span><span class="p">,</span> <span class="s1">'function'</span><span class="p">,</span> <span class="s1">'this'</span><span class="p">,</span> <span class="s1">'with'</span><span class="p">,</span> 
	      <span class="s1">'default'</span><span class="p">,</span> <span class="s1">'if'</span><span class="p">,</span> <span class="s1">'throw'</span><span class="p">,</span> <span class="s1">'delete'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="s1">'try'</span><span class="p">,</span> <span class="s1">'class'</span><span class="p">,</span> <span class="s1">'enum'</span><span class="p">,</span> 
	      <span class="s1">'extends'</span><span class="p">,</span> <span class="s1">'super'</span><span class="p">,</span> <span class="s1">'const'</span><span class="p">,</span> <span class="s1">'export'</span><span class="p">,</span> <span class="s1">'import'</span><span class="p">,</span> <span class="s1">'implements'</span><span class="p">,</span> <span class="s1">'let'</span><span class="p">,</span> 
	      <span class="s1">'private'</span><span class="p">,</span> <span class="s1">'public'</span><span class="p">,</span> <span class="s1">'yield'</span><span class="p">,</span> <span class="s1">'interface'</span><span class="p">,</span> <span class="s1">'package'</span><span class="p">,</span> <span class="s1">'protected'</span><span class="p">,</span> 
	      <span class="s1">'static'</span><span class="p">,</span> <span class="s1">'null'</span><span class="p">,</span> <span class="s1">'true'</span><span class="p">,</span> <span class="s1">'false'</span><span class="p">);</span>
	    <span class="k">return</span> <span class="nb">preg_match</span><span class="p">(</span><span class="nv">$identifier_syntax</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">)</span>
	        <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nb">in_array</span><span class="p">(</span><span class="nb">mb_strtolower</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="s1">'UTF-8'</span><span class="p">),</span> <span class="nv">$reserved_words</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">outputXML</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1"># JSON if no callback
</span>		<span class="k">if</span><span class="p">(</span> <span class="o">!</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'callback'</span><span class="p">])</span> <span class="p">)</span>
		    <span class="k">exit</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>
		<span class="nv">$string</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">,</span> <span class="s2">" "</span><span class="p">,</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s2">"'"</span><span class="p">,</span> <span class="s1">'"'</span><span class="p">,</span> <span class="nv">$string</span><span class="p">));</span>
		<span class="c1"># JSONP if valid callback
</span>		<span class="k">if</span><span class="p">(</span><span class="nx">JsonpHelper</span><span class="o">::</span><span class="na">is_valid_callback</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'callback'</span><span class="p">]))</span>
		    <span class="k">exit</span><span class="p">(</span><span class="s2">"</span><span class="si">{</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'callback'</span><span class="p">]}(</span><span class="s1">'$string'</span><span class="p">)</span><span class="s2">");
		# Otherwise, bad request
		header('status: 400 Bad Request', true, 400);
	}
}</span>
</pre>
</td>
</tr>
</tbody>
</table>
<pre><code class="language-php" data-lang="php"></code></pre>
</figure>
Line 29 is dedicated to replace all single-quote characters to double-quote, and new lines to simple space. This is to be able to pass xml document as valid javasript string parameter.

Then, the client can use jQuery to get the document from a different domain (it works on same domain as well, which is convenient for testing &amp; development) :
<figure class="highlight">
<pre><code class="language-javascript" data-lang="javascript"></code></pre>
<table>
<tbody>
<tr>
<td class="gutter gl">
<pre class="lineno">1
2
3
4
5
6
7
8
9</pre>
</td>
<td class="code">
<pre><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
	<span class="na">url</span> <span class="p">:</span> <span class="nx">source_url</span><span class="p">,</span>
	<span class="na">dataType</span> <span class="p">:</span> <span class="s1">'jsonp'</span><span class="p">,</span>  <span class="c1">// if dataType is set to 'jsonp' </span>
			    <span class="c1">// a 'callback' parameter will be appended to the request url</span>
	<span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">$data</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">parseXML</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>
		<span class="nx">items</span> <span class="o">=</span> <span class="nx">$data</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">'item'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">});</span>
</pre>
</td>
</tr>
</tbody>
</table>
<pre><code class="language-javascript" data-lang="javascript"></code></pre>
</figure>
Something worth noticing on the client side is on line 5 : the data needs to be converted to xml first, with <code class="highlighter-rouge">$.parseXML</code>before converting to jQuery object. Converting the result string directly to jQuery won’t work : <code class="highlighter-rouge">$data = $(data)</code>;.

That’s about it ! To know more about JSONP, please refer to its wiki <a href="https://en.wikipedia.org/wiki/JSONP">https://en.wikipedia.org/wiki/JSONP</a>.

References :
<ul>
 	<li><a href="http://blog.fossasia.org/">http://blog.fossasia.org</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2015-07-09 08:09:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-09 08:09:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-implement-jsonp-to-download-xml-resource]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Explore PHP pthreads bugs</title>
		<link>http://localhost/lubuntu-alt/2015/05/01/explore-php-pthreads-bugs/</link>
		<pubDate>Fri, 01 May 2015 08:10:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[I’m developing a utility library called <a href="https://github.com/zyzo/meteor-ddp-php">meteor-ddp-php</a>, which makes heavy use of PHP <a href="https://github.com/krakjoe/pthreads">pthreads</a>. Once in a while, I encounters weird, unexplainable bugs that contradicts all my knowledge about computer &amp; programming languages. They just really get me on my nerves. I want to share with you that experience in this post.

Suppose I have a class <code class="highlighter-rouge">B</code> extending <code class="highlighter-rouge">Thread</code> and a class <code class="highlighter-rouge">A</code> which initiates and starts <code class="highlighter-rouge">B</code>:

<em>test.php</em>
<figure class="highlight">
<pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">B</span> <span class="k">extends</span> <span class="nx">Thread</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$i</span> <span class="o">=</span> <span class="mi">100000000</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="nv">$i</span><span class="o">--</span><span class="p">);</span>
        <span class="k">echo</span> <span class="s1">'I\'m feeling lucky'</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">startB</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">B</span><span class="p">();</span>
        <span class="nv">$b</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">();</span>
<span class="nv">$a</span><span class="o">-&gt;</span><span class="na">startB</span><span class="p">();</span>
<span class="k">echo</span> <span class="s1">'Be what\'s next'</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span></code></pre>
</figure>
Logically, the log I expected is (notice I put a considerable delay in <code class="highlighter-rouge">B::run()</code> - I didn’t use <code class="highlighter-rouge">sleep</code> because it is not thread-safe) :
<div class="highlighter-rouge">
<pre class="highlight"><code>Be what's next
I'm feeling lucky
</code></pre>
</div>
Instead, this is what I got by running <code class="highlighter-rouge">php test.php</code> :
<div class="highlighter-rouge">
<pre class="highlight"><code>I'm feeling lucky
Be what's next
</code></pre>
</div>
That’s just weird ! Apparently my child thread is blocking my parent thread, until it terminated. But wait for it. If I move the the <code class="highlighter-rouge">echo</code> line to the end of <code class="highlighter-rouge">startB()</code> method :
<figure class="highlight">
<pre><code class="language-php" data-lang="php">class A {
    public function startB() {
        $b = new B();
        $b-&gt;start();
        echo 'Be what\'s next' . PHP_EOL;
    }
}</code></pre>
</figure>
it works just fine. Seems like the problem is not that <code class="highlighter-rouge">$b-&gt;start()</code> is blocking, but the blocking point is rather at the return of <code class="highlighter-rouge">startB()</code> function !

Now, just for fun, how about I changed the variable <code class="highlighter-rouge">$b</code> in <code class="highlighter-rouge">startB()</code> from function-scope to object-scope instead ? It shouldn’t make any difference right ?
<figure class="highlight">
<pre><code class="language-php" data-lang="php">...
class A {
    private $b;
    public function startB() {
        $this-&gt;b = new B();
        $this-&gt;b-&gt;start();
    }
}
$a = new A();
$a-&gt;startB();
echo 'Be what\'s next' . PHP_EOL;</code></pre>
</figure>
Well, it did. The example works as expected, with this little <em>fix</em>. That’s just crazy ! The scope of the variable shoudn’t have anything to do with the blocking thread problem.

Using the second fix between these two, I dodged the bullet and go on with my application.

I must admit I didn’t go over <a href="https://github.com/krakjoe/pthreads/issues">300+ issues</a> on the github page, and in one of them may lie the answer for all this madness. But still, these problems just demonstrate the myth of multithreading in PHP. <a href="https://neosmart.net/blog/2008/dont-believe-the-lies-php-isnt-thread-safe-yet/">PHP isn’t anywhere near thread-safe</a> yet, even at basic language blocs like function call or variable scope it seems. Working with pthreads requires extreme care and patience. Visit <a href="https://github.com/zyzo/meteor-ddp-php/commit/71df57680954260bcc6dadfc7b244fba4bce895b">here</a> for real-life example.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2015-05-01 08:10:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-01 08:10:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[explore-php-pthreads-bugs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>API Integration</title>
		<link>http://localhost/lubuntu-alt/2015/06/28/api-integration/</link>
		<pubDate>Sun, 28 Jun 2015 08:11:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[My FOSSASIA project is taking a big transitioning step from the starting plan. In milestone 3 and 4, rather than focusing on statistical retrieval and API documentation wepapp, my mentors - Mario (<a href="https://github.com/mariobehling">@mario</a>) and Andreas (<a href="https://github.com/andibraeu">@andibraeu</a>) are guiding me towards integrating fossasia api data in other services. The main goal remains the same though : getting more people to use and to know about the API.

Integrating our set of data into external services can be tricky, but this is also what makes the task so exciting. Currently, we’re already started the integration process into loklak, a distributed searching &amp; harvesting server. You can find out more about loklak via their well detailed <a href="http://loklak.org/about.html">about page</a>. But the plan doesn’t stop there. We’re targeting popular web platforms : Wordpress, Drupal, Github Pages.. so that users can access our data with ease, and use our services / plugins in their websites within simple steps. That would be a big win for us, so I’m very impatient to get going with the code to brings these ideas to life.

References :
<ul>
 	<li><a href="http://loklak.org/">Loklak site</a></li>
 	<li><a href="http://blog.fossasia.org/">http://blog.fossasia.org</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2015-06-28 08:11:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-28 08:11:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[api-integration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A glance at FOSSASIA Calendar API</title>
		<link>http://localhost/lubuntu-alt/2015/06/16/a-glance-at-fossasia-calendar-api/</link>
		<pubDate>Tue, 16 Jun 2015 08:11:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[I am a frequent user of popular social platforms API : Facebook, Twitter, Instagram.. Among others, Facebook Graph API is the API I’m most familiarized with, and despite its lack of documentation, <a href="https://developers.facebook.com/docs/graph-api">Graph API</a> makes me from time to time admire the engineering mind of those who built it. It’s simple, has a clear design, and communicates a consistent philosophy. I inspired a lot from it to implement <a href="http://api.fossasia.net/ics-collector/CalendarAPI.php?source=all">Calendar API</a>, a simple web service at FOSSASIA.

Why naming it API, and not web service ? I don’t know, I was always confused about the two, and as far as I concerns, they are the same. The only difference might be the word ‘web’ that tights web service to HTTP, and the scenario involving two distant machines, while API is somewhat more general (an API call of an in-app library for example).

This is my first time building a web service, and so far there wasn’t any technical challenge : it’s just simple &amp; straightforward PHP script with <code class="highlighter-rouge">echo $results;</code> in the end. Mainly because the hard part is still ahead : getting people to know about it, and maintaining it while there are (hopefully) enough clients who care to yell at API developers when they do something wrong. The API I built supposed to parse the merged ics file of all communities event feeds, and expose it to users, in various formats, with filters and options.

Don’t worry if the last sentence doesn’t make sense. We’ll dive in the details right away.

There are currently two possible formats : <code class="highlighter-rouge">.ics</code> and <code class="highlighter-rouge">.json</code>. Users set the format with <code class="highlighter-rouge">format</code> parameter, for e.g. <code class="highlighter-rouge">format=ics</code>. <code class="highlighter-rouge">ics</code> format is suited for developers who want to import events to their calendar app / wordpress plugin. <code class="highlighter-rouge">json</code> format is for front-end developers who want to build a web / mobile web without the hassle of parsing ics feed.

A few filter parameters are possible to refine search results : <code class="highlighter-rouge">source</code> to filter by community, <code class="highlighter-rouge">from</code>, <code class="highlighter-rouge">to</code> to filter by events time, <code class="highlighter-rouge">limit</code> to limit number of events returned, and <code class="highlighter-rouge">fields</code> to custom select event fields. Finally, <code class="highlighter-rouge">sort</code> parameter is to order the results by certain criteria. Currently only datetime ordering (ascending or descending) are available.

As I said, the Calendar API is inspired a lot from Facebook API. Those are the ideas I pickpocketed from their design :
<ul>
 	<li>multiple values parameter. With <code class="highlighter-rouge">source</code> and <code class="highlighter-rouge">fields</code>, multiple values can be provided, separated using comma.</li>
 	<li><code class="highlighter-rouge">fields</code> parameter. The motivation for event field filter is because the event has lots of different fields, and different users are interested in different information.</li>
</ul>
There is also the “linked edge” characteristic of Graph API that I find very interesting : connection between related data make them more useful. It is done that way mainly because the API reflects Facebook own data model, but there is nothing thats prevents unconnected data to be presented in a connected way. So I’ll hope to implement something similar for FOSSASIA Calendar API in the futur.

(Right now the API serves events from Freifunk community, not FOSSASIA, mostly because there are not enough event feeds from FOSSASIA community to collect. So if you want to help us, you can add ics feed of your open-source community to FOSSASIA API. <a href="https://github.com/fossasia/common.api.fossasia.net/blob/dev/ics-collector/API.md#how-it-works-">Here’s how</a>).

References :
<ul>
 	<li>FOSSASIA Calendar API : <a href="http://api.fossasia.net/ics-collector/CalendarAPI.php?source=all">http://api.fossasia.net/ics-collector/CalendarAPI.php?source=all</a></li>
 	<li><a href="http://blog.fossasia.org/">http://blog.fossasia.org</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2015-06-16 08:11:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-16 08:11:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-glance-at-fossasia-calendar-api]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Calendario : another JS calendar library</title>
		<link>http://localhost/lubuntu-alt/2015/06/05/calendario-another-js-calendar-library/</link>
		<pubDate>Fri, 05 Jun 2015 08:12:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[Calendario is a lightweight <a href="https://github.com/codrops/Calendario">calendar library</a> that I happen to find on the net. Their approach to calendaring solution is rather unique : it’s not a full-blown library like jQuery <a href="http://fullcalendar.io/">FullCalendar</a> where everthing is ready to be used. With Calendario, calling init function simply generates plains html source code. The styling part is completely up to user.

Another plus is it’s lightweight (350 lines of code more or less). It’s easy to dive into the source and make advanced adaptations to specific use-case.

But what’s really remarkable is their examples. As I said the styling is out-sourcing to user, and they provide <a href="http://deviprsd21.github.io/Calendario/">stunning examples</a> that demonstrate how to do it. For me (a developer “designing” stuffs), readily beautiful examples are a crucial selling point.

But (there’s always a but..), Calendario is very poorly documented. A pointer to the same <a href="http://tympanus.net/codrops/2012/11/27/calendario-a-flexible-calendar-plugin/">blog post</a> all over again is not enough ! I was very confusing about how things work at first, especially about the data model. This blog contains what I found out (rather painfully) about Calendario library :
<h3 id="initialization">Initialization</h3>
<figure class="highlight">
<pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"calendar_id"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;script&gt;</span>
	<span class="nx">$</span><span class="p">(</span><span class="s1">'#calendar_id'</span><span class="p">).</span><span class="nx">calendario</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
<span class="nt">&lt;/script&gt;</span></code></pre>
</figure>
<h3 id="available-options">Available options</h3>
<table>
<thead>
<tr>
<th>Option</th>
<th>Purpose*</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>weeks</td>
<td>weekday labels</td>
<td>[‘Sunday’, ‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, ‘Saturday’]</td>
</tr>
<tr>
<td>weekabbrs</td>
<td>weekday short labels</td>
<td>[‘Sun’, ‘Mon’, ‘Tue’, ‘Wed’, ‘Thu’, ‘Fri’, ‘Sat’]</td>
</tr>
<tr>
<td>months</td>
<td>month label</td>
<td>[‘January’, ‘February’, ‘March’, ‘April’, ‘May’, ‘June’, ‘July’, ‘August’, ‘September’, ‘October’, ‘November’, ‘December’]</td>
</tr>
<tr>
<td>monthabbrs</td>
<td>monday short labels</td>
<td>[‘Jan’, ‘Feb’, ‘Mar’, ‘Apr’, ‘May’, ‘Jun’, ‘Jul’, ‘Aug’, ‘Sep’, ‘Oct’, ‘Nov’, ‘Dec’]</td>
</tr>
<tr>
<td>displayWeekAbbr</td>
<td>display week short labels</td>
<td>false</td>
</tr>
<tr>
<td>displayMonthAbbr</td>
<td>display month short labels</td>
<td>false</td>
</tr>
<tr>
<td>startIn</td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>fillEmpty</td>
<td></td>
<td>true</td>
</tr>
<tr>
<td>zone</td>
<td></td>
<td>‘00:00’</td>
</tr>
<tr>
<td>events</td>
<td></td>
<td>[[‘click’], [focus’]]</td>
</tr>
<tr>
<td>checkupdate</td>
<td></td>
<td>true</td>
</tr>
<tr>
<td>weekdays</td>
<td></td>
<td>‘MON, TUE, WED, THU, FRI’</td>
</tr>
<tr>
<td>weekends</td>
<td></td>
<td>‘SAT, SUN’</td>
</tr>
<tr>
<td>feed</td>
<td></td>
<td>http://calendario.t15.org/sync/</td>
</tr>
<tr>
<td>month</td>
<td></td>
<td></td>
</tr>
<tr>
<td>year</td>
<td></td>
<td></td>
</tr>
<tr>
<td>caldata</td>
<td>calendar events data</td>
<td></td>
</tr>
</tbody>
</table>
Most of them you can safely ignore, I enlisted them all for the sake of completeness. Checkout the next section for interesting ones.
<h3 id="option-format">Option format</h3>
caldata

A list of json objects. The list’s keys and values contain following information :
<ul>
 	<li>key : the event date in MM-DD-YYYY format</li>
 	<li>value : an array of event values that occured on the given date. Each case of the array can have following fields :</li>
</ul>
<table>
<tbody>
<tr>
<td>Option</td>
<td>Purpose</td>
<td>Value type</td>
</tr>
<tr>
<td>content</td>
<td>title of the event</td>
<td>string</td>
</tr>
<tr>
<td>url</td>
<td>Link to event page</td>
<td>string</td>
</tr>
<tr>
<td>note</td>
<td>added note for the event, will be included in the html as inside tag</td>
<td>string</td>
</tr>
<tr>
<td>startday</td>
<td></td>
<td>string, in MM-DD-YYYY format</td>
</tr>
<tr>
<td>endday</td>
<td></td>
<td>string, in MM-DD-YYYY format</td>
</tr>
<tr>
<td>allDay</td>
<td>true for all day event</td>
<td>boolean</td>
</tr>
</tbody>
</table>
<u>Examples</u>
<figure class="highlight">
<pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">events</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s1">'06-06-2015'</span> <span class="p">:</span> <span class="p">[{</span><span class="na">content</span><span class="p">:</span> <span class="s1">'Important Meeting at 4'</span><span class="p">,</span> <span class="na">startTime</span><span class="p">:</span> <span class="s1">'04:00'</span><span class="p">,</span> <span class="na">endTime</span><span class="p">:</span> <span class="s1">'06:00'</span><span class="p">,</span> <span class="na">note</span> <span class="p">:</span> <span class="s1">'Everyone please gather at Markketing Department'</span><span class="p">}],</span>
	<span class="s1">'06-07-2015'</span> <span class="p">:</span> <span class="p">[{</span><span class="na">content</span> <span class="p">:</span> <span class="s1">'First event of July 7'</span><span class="p">,</span> <span class="na">allDay</span> <span class="p">:</span> <span class="kc">true</span><span class="p">},</span> 
	                <span class="p">{</span><span class="na">content</span> <span class="p">:</span> <span class="s1">'Second event of July 7'</span><span class="p">,</span> <span class="na">allDay</span> <span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
	               <span class="p">],</span>
	<span class="s1">'07-01-2015'</span> <span class="p">:</span> <span class="p">[{</span><span class="na">content</span><span class="p">:</span> <span class="s1">'All day event'</span><span class="p">,</span> <span class="na">allDay</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">note</span> <span class="p">:</span> <span class="s1">'So loongg !'</span><span class="p">}]</span>
<span class="p">}</span></code></pre>
</figure>
<h3 id="wrap-up--pros-and-cons-of-calendario">Wrap-up : Pros and cons of Calendario</h3>
<ul>
 	<li>Pros :
<ul>
 	<li>lightweight</li>
 	<li>fully customizable design</li>
 	<li>beautiful examples</li>
</ul>
</li>
 	<li>Cons
<ul>
 	<li>poor documentation</li>
 	<li>lots of work undone, not recommended for those who want a powerful library that just work</li>
</ul>
</li>
</ul>
That’s about it ! Found something wrong, or just want to help completing this unofficial calendario documentation ? Send me a PR <a href="https://github.com/zyzo/zyzo.github.io">here</a>

<strong>*NOTE</strong> : this documentation is based on Calendario v4.0.0 <a href="https://github.com/deviprsd21/Calendario">https://github.com/deviprsd21/Calendario</a>

References :
<ul>
 	<li><a href="https://github.com/zyzo/EventsPanel">My experiments for FOSSASIA community timeline, powerered by Calendario</a></li>
 	<li><a href="http://blog.fossasia.org/">http://blog.fossasia.org</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2015-06-05 08:12:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-05 08:12:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[calendario-another-js-calendar-library]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FOSSASIA API calendar service</title>
		<link>http://localhost/lubuntu-alt/2015/05/25/fossasia-api-calendar-service/</link>
		<pubDate>Mon, 25 May 2015 08:13:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[ICalendar is a file format residing under <a href="https://tools.ietf.org/html/rfc5545">RFC 5445</a>, to represent and exchange calendaring and scheduling information. The file extension is generally <code class="highlighter-rouge">.ics</code>, and <code class="highlighter-rouge">.iCal</code> for Apple software. The aim was to define a standard format that could be understood everywhere, independent of calendar vendors : Google Calendar, Apple iCal, Yahoo! Calendar, Mozilla Lightning, Microsoft Outlook… Nevertheless, true interoperability doesn’t seem to be the reality. My next task at FOSSASIA is to this circumvent this situation and create a calendar service / vizualisation from ICalendar sources provided by different open-source communities, hence probably from different vendors and format deviations.

To have an idea of the problem I’m dealing with, I gathered a bunch of ics files, mostly <a href="https://github.com/freifunk/directory.api.freifunk.net/blob/master/directory.json">provided by freifunk communities</a>, using these little <a href="https://github.com/zyzo/api-collector">node scripts</a>, and try to spot a not-so-standard implementation. To have a less mechanical approach, I developed a visual tool to debug my ics. Here are some screenshots of the app:

<img title="Parser input and general info panel" src="http://zyzo.github.io/images/ics-debugging-tool-2.png" alt="Ics debugging tool screenshot 1" /><em>Screenshot 1</em>

<em>Screenshot 2</em>

<img title="Heatmap and detailed calendar" src="http://zyzo.github.io/images/ics-debugging-tool-1.png" alt="Ics debugging tool screenshot 1" />

The tool is fairly simple : you copy the ics text into the text area (or choose between example files), press <code class="highlighter-rouge">Feed me !</code>, the system will get running and provide some outputs. There is a general info panel, a yearly heatmap, and a calendar. It is a great help for me since I can just switch between ics files, see all the events counts in the heatmap, and event detailed information in the calendar.

Source code &amp; demo version coming soon ! Built with ics parser library <a href="https://github.com/johngrogg/ics-parser">https://github.com/johngrogg/ics-parser</a>, CalHeatmap <a href="https://kamisama.github.io/cal-heatmap/">https://kamisama.github.io/cal-heatmap/</a> and jquery plugin <a href="http://fullcalendar.io/">FullCalendar.io</a>.

<strong><em>Update</em></strong> :

Source : <a href="https://github.com/zyzo/ics-tools">https://github.com/zyzo/ics-tools</a>

Demo : <a href="http://fossasia-api.herokuapp.com/">http://fossasia-api.herokuapp.com/</a>

References :
<ul>
 	<li><a href="http://freifunk.net/wie-mache-ich-mit/community-finden/">Freifunk community map</a></li>
 	<li><a href="http://blog.fossasia.org/">http://blog.fossasia.org</a></li>
 	<li><a href="https://github.com/johngrogg/ics-parser">https://github.com/johngrogg/ics-parser</a></li>
 	<li><a href="https://kamisama.github.io/cal-heatmap/">https://kamisama.github.io/cal-heatmap/</a></li>
 	<li><a href="http://fullcalendar.io/">FullCalendar.io</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2015-05-25 08:13:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-25 08:13:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fossasia-api-calendar-service]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scrum journey</title>
		<link>http://localhost/lubuntu-alt/2015/05/12/scrum-journey/</link>
		<pubDate>Tue, 12 May 2015 08:15:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[Exception, perception, and knowledge are things that fade away. The truth is that your memory betrays you all the time by erasing (without asking you a word !) all your experience about things that you used to know. If you are old enough to forget how awesome your childhood was, and are frustrating because you do, you’ll understand what I mean.

The problem is, experience is often very valuable, even if it is about how you felt being ignorant. For instance, as a teacher, you want to know what it’s like to know nothing about a subject, so you can deliver it to your students, in a less boring or overwhelming way. As a framework designer, if you want to strive for easy integration and small learning curve, you should at first know what small learning curve and easy integration look like for newbies.

I’m not going off topic any further. The reason I’m saying all this is because I’m learning a whole new concept that I have absolutely zero idea about: scrum mehodology. This framework is applied in <a href="http://zyzo.github.io/gsoc/2015/05/03/gsoc-the-beginning.html">my gsoc project at FOSSASIA</a>. I don’t have all the data yet, but my first impression is that this is a hell of a subject that would deeply impact me in my work life.

Therefore I’ll use this blog as a diary to log all my experience in my scrum’s discovery journey, so when I’m skillful enough, I can look back at this and remember what it’s like to be ignorant again. I’ll also post useful links and stuffs that help me, so I hope this blog will benifits others as well.

As consequence, this blog will likely be updated in the future. I don’t know when, but it will be. Unless I (am very unlikely to) become a scrum master with no more stuff to learn.

<img title="Life of a scrum master" src="http://zyzo.github.io/images/what-does-a-scrum-master-do.jpg" alt="Image broken" />
<em>Image credit : http://www.agilelearninglabs.com/2012/02/what-does-a-scrum-master-do/</em>
<h3 id="outline">Outline</h3>
<ul>
 	<li><a href="http://zyzo.github.io/gsoc/fossasia/2015/05/12/scrum-journey.html#day-1--what-the-heck-is-scrum-and-scrum-questions-">Day 1 : What the heck is scrum and scrum questions ?</a></li>
</ul>
<h3 id="day-1--what-the-heck-is-scrum-and-scrum-questions-">Day 1 : What the heck is scrum, and scrum questions ?</h3>
<strong>Scrum</strong> is a version of agile programming, as opposed to “waterfall” programming where all specifications are planned in the beginning and all deliverables in the end. My first impression about scrum is, it doesn’t bring anything new to the table. Smaller release cycle ? Daily team communication ? Sprint-based/task-based development ? More client interaction ? These are useful tips/guidelines for sure, but for a developer, this sounds quite trivial and just like common sense. Maybe from a manager’s point of view, it might looks more like a fresh idea. But if that’s all agile programming is about, then it might not worth the hassle.

My mentors first <a href="https://github.com/fossasia/api.fossasia.net/issues/7">asked me what my scrum questions are</a>. I was like, questions about scrum ? Yes please, I have tons of them, because I know nothing yet ! But, what <strong>scrums questions</strong> really mean is simple questions that each member of the team has to answer in each daily standup meeting. It is intended to keep the meeting short (&lt; 15 min) and concise. The most basic line of scrum questions is these three :
<blockquote>
<ol>
 	<li>What did you do yesterday?</li>
 	<li>What will you do today?</li>
 	<li>What obstacle did you find in your way?</li>
</ol>
</blockquote>
The meeting is intended to help team members to know about others’ work, and to (eventually) help them . Most importantly, it’s about making commitments (“I intend to complete this task today, but if I don’t, please don’t look down on me!”). That way the next day others developers will certainly know if the developper did or did not achieve what they intended, and why.

<img title="Scrum time or grumpy time ? " src="http://zyzo.github.io/images/scrum-daily-grumpy-cat-meow.jpg" alt="Image broken" />

So far so good. The way I see it, the daily standup idea has good faith in itself : it encourages <strong>just enough</strong> amount of team communication. When I was at <a href="http://www.groupeonepoint.com/">OnePoint</a>, where waterfall methodology is used, and no team interaction protocol is enforced, I feel like this is exactly the thing we needed.

In my next update that I don’t know when, I’ll probably talk about scrum in my one-man-land situation, that is, a single developer in the development team.

References :
<ul>
 	<li><a href="http://www.tutorialspoint.com/scrum/">http://www.tutorialspoint.com/scrum/</a></li>
 	<li><a href="http://brainslink.com/2011/08/7-scrum-variations-that-might-work-for-you/">http://brainslink.com/2011/08/7-scrum-variations-that-might-work-for-you/</a></li>
 	<li><a href="http://blog.fossasia.org/">http://blog.fossasia.org</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2015-05-12 08:15:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-12 08:15:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scrum-journey]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Embed Leaflet map as coordinates picker</title>
		<link>http://localhost/lubuntu-alt/2015/05/03/embed-leaflet-map-as-coordinates-picker/</link>
		<pubDate>Sun, 03 May 2015 08:16:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[<header class="post-header">
<p class="post-meta"><img style="font-size: 1rem;" title="The generator form with map picker embedded" src="http://zyzo.github.io/images/map-picker.png" alt="Image broken" /></p>

</header><article class="post-content">As a warm up task for my GSoC project, I want to embed a map to the FOSSASIA API <a href="http://api.fossasia.net/generator/index.html">generator form</a> as a convenient way for users to provide their location coordinates. When the user clicks on a location on the map, two input fields <strong>Latitude</strong>and <strong>Longitude</strong> will be automatically updated with fresh values. Here’s how.

For this task you need <a href="https://jquery.com/">jquery</a> and <a href="http://leafletjs.com/">leaflet</a> - an openstreetmap library. You also want to prepare an empty <code class="highlighter-rouge">div</code> for the embed map :
<figure class="highlight">
<pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"latInput"</span><span class="nt">&gt;</span>Latitude<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"latInput"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"lngInput"</span><span class="nt">&gt;</span>Longitude<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"lngInput"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"map"</span> <span class="na">style=</span><span class="s">"height : 200px"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://code.jquery.com/jquery-1.11.3.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre>
</figure>
Now, let’s instanciate the <code class="highlighter-rouge">div</code> using the leaflet API. A tile layer must be provided, in this example I’m using <a href="https://www.mapbox.com/">mapbox</a> but there are other tile providers as well :
<figure class="highlight">
<pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">mapCenter</span> <span class="o">=</span> <span class="p">[</span><span class="mi">22</span><span class="p">,</span> <span class="mi">87</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="nx">L</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="s1">'map'</span><span class="p">,</span> <span class="p">{</span><span class="na">center</span> <span class="p">:</span> <span class="nx">mapCenter</span><span class="p">,</span> <span class="na">zoom</span> <span class="p">:</span> <span class="mi">3</span><span class="p">});</span>
<span class="nx">L</span><span class="p">.</span><span class="nx">tileLayer</span><span class="p">(</span><span class="s1">'https://{s}.tiles.mapbox.com/v3/{id}/{z}/{x}/{y}.png'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">maxZoom</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="na">attribution</span><span class="p">:</span> <span class="s1">'Map data &amp;copy; &lt;a href="http://openstreetmap.org"&gt;OpenStreetMap&lt;/a&gt; contributors, '</span> <span class="o">+</span>
    <span class="s1">'&lt;a href="http://creativecommons.org/licenses/by-sa/2.0/"&gt;CC-BY-SA&lt;/a&gt;, '</span> <span class="o">+</span>
    <span class="s1">'Imagery © &lt;a href="http://mapbox.com"&gt;Mapbox&lt;/a&gt;'</span><span class="p">,</span>
    <span class="na">id</span><span class="p">:</span> <span class="s1">'examples.map-i875mjb7'</span><span class="p">,</span>
    <span class="na">noWrap</span> <span class="p">:</span> <span class="kc">true</span>
<span class="p">}).</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span></code></pre>
</figure>
When the user clicks on the map, I want to point a marker to their choice and display a popup with choosen coordinates. That’s what <code class="highlighter-rouge">updateMarker</code> function is good for :
<figure class="highlight">
<pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">marker</span> <span class="o">=</span> <span class="nx">L</span><span class="p">.</span><span class="nx">marker</span><span class="p">(</span><span class="nx">mapCenter</span><span class="p">).</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">updateMarker</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">marker</span>
        <span class="p">.</span><span class="nx">setLatLng</span><span class="p">([</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">])</span>
        <span class="p">.</span><span class="nx">bindPopup</span><span class="p">(</span><span class="s2">"Your location :  "</span> <span class="o">+</span> <span class="nx">marker</span><span class="p">.</span><span class="nx">getLatLng</span><span class="p">().</span><span class="nx">toString</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">openPopup</span><span class="p">();</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">};</span></code></pre>
</figure>
The last missing piece is, on map click event, updating the lat and lng inputs :
<figure class="highlight">
<pre><code class="language-javascript" data-lang="javascript"><span class="nx">map</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#latInput'</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">latlng</span><span class="p">.</span><span class="nx">lat</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#lngInput'</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">latlng</span><span class="p">.</span><span class="nx">lng</span><span class="p">);</span>
    <span class="nx">updateMarker</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">latlng</span><span class="p">.</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">latlng</span><span class="p">.</span><span class="nx">lng</span><span class="p">);</span>
<span class="p">});</span></code></pre>
</figure>
Now if you need the other way around - enter manually the input fields to update the marker, it could be easily done as well, by capturing a useful event associated with HTML <code class="highlighter-rouge">input</code> tag - the… <code class="highlighter-rouge">input</code> event :
<figure class="highlight">
<pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">updateMarkerByInputs</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">updateMarker</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'#latInput'</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'#lngInput'</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
<span class="p">}</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">'#latInput'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'input'</span><span class="p">,</span> <span class="nx">updateMarkerByInputs</span><span class="p">);</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">'#lngInput'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'input'</span><span class="p">,</span> <span class="nx">updateMarkerByInputs</span><span class="p">);</span></code></pre>
</figure>
That’s about it ! Check out this tutorial on <a href="https://gist.github.com/zyzo/143e2d8ec67f7c316ae2">Gist</a> and <a href="http://jsfiddle.net/zyzo/d8wafp5q/">JSFiddle</a>.

References :
<ul>
 	<li>FOSSASIA API generator page <a href="http://api.fossasia.net/generator/index.html">http://api.fossasia.net/generator/index.html</a></li>
 	<li><a href="http://blog.fossasia.org/">http://blog.fossasia.org</a></li>
</ul>
</article>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2015-05-03 08:16:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-03 08:16:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[embed-leaflet-map-as-coordinates-picker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GSoC 2015 with FOSSASIA : the beginning</title>
		<link>http://localhost/lubuntu-alt/2015/05/03/gsoc-2015-with-fossasia-the-beginning/</link>
		<pubDate>Sun, 03 May 2015 08:17:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[I was choosen as a student participant to <strong>Google Summer of Code 2015</strong>.

It’s a program organized by Google <a href="https://www.google-melange.com/gsoc/homepage/google/gsoc2015">that offers students stipends to write code for open source projects</a>. Being selected is a big deal for me since GSoC is a vey selective program, and a meaningful way to spend my summer, by doing what I very much enjoy : coding. What’s more, students get paid doing it. I’m not denying that the $5500 stipend per student is really sexy (at least for me). It’s way more than most software interns in <a href="http://www.glassdoor.com/Salaries/france-salary-SRCH_IL.0,6_IN86.htm">France</a> get for a three months period.

I just knew about GSoC two months ago thanks to a teacher. Before that, I have very little notion about open-source software, and none about GSoC. I cure my ignorance since then with a lot of interesting blogs and definitions. Based on the information I’ve been fed with, I could now say <strong>open-source is great</strong>. From the company’s point at view, it’s a great form of advertising. For the project, open-source often means better code and documentation. The developers knows the whole world has access to the source code, so they’ll probably take better care of it. Also, open-sourcing is a must if you want to create a vibrant community and ecosystem.

Open-source is great, getting involved, even better. With GSoC you have the opportunity to work on an open-source project with <strong>mentoring support from the core developers</strong> who are maintaining it themselves. Awesome ! To get into the program as a student, you have to choose betweens <a href="http://www.google-melange.com/gsoc/org/list/public/google/gsoc2015">accepted mentoring organizations</a> and propose a project idea suited to them. I was particularly attracted to FOSSASIA, an open-source event community in Asia, and their project idea <a href="http://labs.fossasia.org/ideas.html#Extend toolbox for FOSSASIA (and Freifunk) API">Extend toolbox for FOSSASIA and Freifunk API</a>. The Freifunk/FOSSASIA API is designed to solve the problem of collecting data from different communities in a decentralized way. It makes some interesting parts of the FOSSASIA community site possible, e.g. the <a href="http://fossasia.github.io/#map">Common Map</a>.

<img title="FOSSASIA official logo" src="http://zyzo.github.io/images/fossasia-logo.png" alt="Image broken" /> <em>FOSSASIA logo</em>

I think the toolbox has a great potential to create a strong network between different communities at different locations, by providing attractive statistics visualization. With that spirit in mind, my project’s proposal aims to add new components and improve old ones. Here are some of them :
<ul>
 	<li>Improve the <a href="http://api.fossasia.net/generator/index.html">json generator page</a></li>
 	<li>Calendar service</li>
 	<li>Community news / events panel</li>
 	<li>Common Map filters :
<ul>
 	<li>by country</li>
 	<li>by technical area</li>
</ul>
</li>
 	<li>Statistic service / charts :
<ul>
 	<li>communities counts</li>
 	<li>active period panel based on news/events date (like the contribution panel on github)</li>
</ul>
</li>
 	<li>API Documentation web app</li>
 	<li>etc.</li>
</ul>
In my <a href="http://zyzo.github.io/categories/#gsoc">gsoc</a> blog series, I’ll cherry-pick sutffs that I find valuable from my GSoC project to show to the world. So if you’re interested on what I’ll do, stick around for upcoming updates !

References :
<ul>
 	<li><a href="http://blog.fossasia.org/">http://blog.fossasia.org</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2015-05-03 08:17:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-03 08:17:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gsoc-2015-with-fossasia-the-beginning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Optimize React-Redux App</title>
		<link>http://localhost/lubuntu-alt/2015/05/26/optimize-react-redux-app/</link>
		<pubDate>Tue, 26 May 2015 08:19:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[React is advertised as <a href="https://facebook.github.io/react/docs/perf.html">quite fast out of the box</a>. In extreme cases when your app hits performance problem, you just have to optimize the re-rendering process by <a href="https://facebook.github.io/react/docs/shallow-compare.html">shallow comparing</a> React props and state inside <a href="https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate">shouldComponentUpdate</a>lifecycle function. The strategy for optimizing seems quite straight-forward.

However I found that this strategy is less clear in a React/Redux environment. Here are some advices that you should considering when dealing with your app performance:
<h3 id="use-immutable-data">Use Immutable data</h3>
This one should be a no-brainer with any React app. <code class="highlighter-rouge">shouldComponentUpdate</code> can only be useful when all the props can be shallow-compared. So as a rule of thumb, your components props can only be of 3 types:
<ul>
 	<li>Immutable</li>
 	<li>Primitive type (number, boolean, etc.)</li>
 	<li>Function type (e.g. callback event)</li>
</ul>
I didn’t mention how you should handle React state. That is because Redux uses a separate store as application state. But sometimes, you need to use both <a href="https://github.com/reactjs/redux/issues/1287">React’s state and Redux’s store</a>. In that case, both props and state are shallow-compared so state elements should follow mentioned rules as well.
<h3 id="do-not-use-ownprops">Do not use ownProps</h3>
When you create stateful components (containers) using <code class="highlighter-rouge">connect</code> function from <a href="https://github.com/reactjs/react-redux">react-redux</a> library, <code class="highlighter-rouge">shouldComponentUpdate</code> is declared implicitly, so you normally don’t have to implement it yourself.

However the <a href="https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L77">implementation</a> of <code class="highlighter-rouge">shouldComponentUpdate</code> is such that if you uses <code class="highlighter-rouge">ownProps</code> in your <code class="highlighter-rouge">mapStateToProps</code> or <code class="highlighter-rouge">mergeProps</code> function, it will always return false, so the component will always be updated.

This means that if you want your component to be optimized, you can’t use information from passed props to get other information from the store. Why the implementation has to be this way is still unclear to me.
<h3 id="avoid-connect-on-frequently-called-elements">Avoid <code class="highlighter-rouge">connect</code> on frequently-called elements</h3>
<code class="highlighter-rouge">connect</code> function wraps the component inside another component with lots of decorated elements. These heavy overheads should be avoided on components that are called a lot in your application, for e.g. an element of a list.
<h3 id="use-performance-tools">Use Performance Tools</h3>
Finally, here are some excellent tools from the React team. Use them to identify the bottleneck in your React application:
<ul>
 	<li><a href="https://facebook.github.io/react/docs/perf.html#perf.printwastedmeasurements">React Perf’s printWasted() function</a></li>
 	<li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">React Dev Tools</a> trace react update</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2015-05-26 08:19:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-26 08:19:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[optimize-react-redux-app]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Get Facebook comments with large user pictures</title>
		<link>http://localhost/lubuntu-alt/2015/06/17/get-facebook-comments-with-large-user-pictures/</link>
		<pubDate>Wed, 17 Jun 2015 08:19:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/lubuntu-alt/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[On the <code class="highlighter-rouge">/user</code> edge, user pictures url are not returned by default, and when users ask for it, the response image is not in biggest format. This query should get the <em>largest</em> user pictures associated with post :
<figure class="highlight">
<pre><code class="language-php" data-lang="php">	/user{picture.type(large)}</code></pre>
</figure>
There are other use cases where this syntax applies as well
<ul>
 	<li>get comments of a feed</li>
</ul>
<figure class="highlight">
<pre><code class="language-php" data-lang="php">	/feed?fields='from{picture.type(large)}'</code></pre>
</figure>
<ul>
 	<li>get feeds of an user</li>
</ul>
<figure class="highlight">
<pre><code class="language-php" data-lang="php">	/userid/feed?fields={from{picture.type(large)}}</code></pre>
</figure>
Examples tested with Facebook Graph API &gt; v2.0, using <a href="https://developers.facebook.com/tools/explorer/145634995501895/?method=GET&amp;path=me%3Ffields%3Did%2Cname">Graph Explorer</a> and <a href="https://developers.facebook.com/docs/reference/php/4.0.0">PHP SDK</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2015-06-17 08:19:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-17 08:19:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[get-facebook-comments-with-large-user-pictures]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fossasia"><![CDATA[fossasia]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
